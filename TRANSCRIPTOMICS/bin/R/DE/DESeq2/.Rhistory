# Volver la data frame una matriz de datos
alldata<-read.delim("../../../../metadata/allreadsgenes.txt")
library(DESeq2)
# Volver la data frame una matriz de datos
alldata<-read.delim("../../../../metadata/allreadsgenes.txt")
alldata <- as.data.frame(alldata)
x<-alldata
rownames(x)<-alldata[,1]
x<-x[ ,2:ncol(x)]
alldata<-as.matrix(x)
# Comparaciones
DC235vsDSS124<- subset(alldata, select = -c(HC_1, HC_2, HC_3, HC_4, HC_5, HS_1, HS_2, HS_5,
HC17, DC47,
DC_1,DC_4))
# Información sobre estos individuos
tratamiento <- c("DC", "DC", "DC",
"DS", "DS", "DS")
label<- c("DC_2", "DC_3", "DC_5",
"DS_1", "DS_2","DS_4")
samples<- c("DC2", "DC3", "DC5",
"DS1", "DS2","DS4")
colData<- data.frame(tratamiento,label,samples)
rownames(colData)<- label
description<- colData[,c("tratamiento", "samples")]
# Filtrado de genes. Retirar genes con ningun conteo
matrizconteo <- DC235vsDSS124
head(matrizconteo )
suma <- rowSums(matrizconteo)
matriznueva<- matrizconteo[suma != 0,]
dim(matriznueva)
head(matriznueva)
# Creamos el objeto con la clase DESeqDataSet
dds <- DESeqDataSetFromMatrix(countData=matriznueva, colData= description, design=~tratamiento)
dds$tratamiento
dds$tratamiento <- relevel(dds$tratamiento, "DS")
dds$tratamiento
# Pruebas DESeq 2
dds <- DESeq(dds)
# Tamaños de muestras normalizados
sizeFactors(dds)
# Dispersiones finales estimadas
head(dispersions(dds))
res <- results(dds)
head(res)
# Ordenar los genes según el p-valor ajustado.
resOrdered <- res[order(res$padj),]
head(resOrdered)
# Genes se pueden considerar realmente como diferencialmente expresados.
xx <-res[order(res$padj,na.last=NA),]
resSig2 <- xx[xx$padj < 0.1, ]
dim(resSig2)
plotMA(res, main="MA-plot DESeq2 DC235vsDSS124", ylim=c(-2,2))
rownames(resSig2)
View(x)
View(matriznueva)
View(xx)
View(resOrdered)
resOrdered$log2FoldChange
rownames(resOrdered)
VPSol <- data.frame(resOrdered$log2FoldChange, resOrdered$sig, row.names = rownames(resOrdered)) ##Creates a data
resOrdered$sig
VPSol <- data.frame(resOrdered$log2FoldChange, resOrdered$pvalue, row.names = rownames(resOrdered)) ##Creates a data
VPSol <- VPSol %>% rename(FoldChange = BCresultsNR.log2FoldChange, p_value = BCresultsNR.sig)
library(magrittr) # needs to be run every time you start R and want to use %>%
library(dplyr)
VPSol <- VPSol %>% rename(FoldChange = BCresultsNR.log2FoldChange, p_value = BCresultsNR.sig)
VPSol <- VPSol %>% rename(FoldChange = resOrdered$log2FoldChange, p_value = resOrdered$pvalue)
VPSol <- data.frame(resOrdered$log2FoldChange, resOrdered$pvalue, row.names = rownames(resOrdered)) ##Creates a data
View(VPSol)
VPSol$color <- ifelse((VPSol$FoldChange > 1.5) & (VPSol$p_value < 0.05), "Col_1",
ifelse((VPSol$FoldChange < -1.5) & (VPSol$p_value < 0.05), "Col_2",
ifelse((VPSol$FoldChange > 1.5) & (VPSol$p_value > 0.05), "Col_3",
ifelse((VPSol$FoldChange < -1.5) & (VPSol$p_value > 0.05), "Col_4",
ifelse((VPSol$FoldChange < 1.5) & (VPSol$p_value > 0.05), "Col_5", "Col_6")))))
VPSol <- data.frame(resOrdered$log2FoldChange, resOrdered$pvalue, row.names = rownames(resOrdered)) ##Creates a data
VPSol <- VPSol %>% rename(FoldChange = resOrdered.log2FoldChange, p_value = resOrdered.pvalue)
VPSol$color <- ifelse((VPSol$FoldChange > 1.5) & (VPSol$p_value < 0.05), "Col_1",
ifelse((VPSol$FoldChange < -1.5) & (VPSol$p_value < 0.05), "Col_2",
ifelse((VPSol$FoldChange > 1.5) & (VPSol$p_value > 0.05), "Col_3",
ifelse((VPSol$FoldChange < -1.5) & (VPSol$p_value > 0.05), "Col_4",
ifelse((VPSol$FoldChange < 1.5) & (VPSol$p_value > 0.05), "Col_5", "Col_6")))))
##Create plot##
ggplot(VPSol, aes(x=FoldChange, y=p_value)) +
geom_point(aes(colour = color))
library(ggplot2)
##Create plot##
ggplot(VPSol, aes(x=FoldChange, y=p_value)) +
geom_point(aes(colour = color))
VPSol$color <- ifelse((VPSol$FoldChange > 1.5) & (VPSol$p_value < 0.05), "Col_1",
ifelse((VPSol$FoldChange < -1.5) & (VPSol$p_value < 0.05), "Col_2",
ifelse((VPSol$FoldChange > 1.5) & (VPSol$p_value > 0.05), "Col_3",
ifelse((VPSol$FoldChange < -1.5) & (VPSol$p_value > 0.05), "Col_4",
ifelse((VPSol$FoldChange < 1.5) & (VPSol$p_value > 0.05), "Col_5", "Col_6")))))
##Create plot##
ggplot(VPSol, aes(x=FoldChange, y=p_value)) +
geom_point(aes(colour = color))
VPSol
ggplot(VPSol, aes(x=FoldChange, y=p_value)) +
geom_point(aes(colour = VPAol$color))
##Create plot##
palette("#59a967",
"#b25fbc",
"#a7983d",
"#6882d0",
"#cb673e",
"#c95779")
##Create plot##
palette(c("#59a967",
"#b25fbc",
"#a7983d",
"#6882d0",
"#cb673e",
"#c95779"))
##Create plot##
palette(value = VPSol$color)
ggplot(VPSol, aes(x=FoldChange, y=p_value)) +
geom_point(aes(colour = color))
VPSol$color <- ifelse((VPSol$FoldChange > 1.5) & (VPSol$p_value < 0.05), "A",
ifelse((VPSol$FoldChange < -1.5) & (VPSol$p_value < 0.05), "B",
ifelse((VPSol$FoldChange > 1.5) & (VPSol$p_value > 0.05), "C",
ifelse((VPSol$FoldChange < -1.5) & (VPSol$p_value > 0.05), "D",
ifelse((VPSol$FoldChange < 1.5) & (VPSol$p_value > 0.05), "E", "F")))))
View(VPSol)
ggplot(VPSol, aes(x=FoldChange, y=p_value)) +
geom_point(aes(colour = color))
ggplot(VPSol, aes(x=FoldChange, y=p_value))
ggplot(VPSol, aes(x=FoldChange, y=p_value))
ggplot(VPSol, aes(x=FoldChange, y=p_value))
ggplot(VPSol, aes(x=FoldChange, y=p_value, color = color))
ggplot(VPSol, aes(x=FoldChange, y=p_value, colour = color))
palette()
ggplot(VPSol) +
geom_point(
data = VPSol,
aes(x = FoldChange, y = p_value),
color = "green",
cex = 3
)
ggplot(VPSol) +
geom_point(
data = VPSol,
aes(x = FoldChange, y = p_value),
color = "#B25FBC",
cex = 3
)
dev.off()
ggplot(VPSol, aes(x=FoldChange, y=p_value)) +
geom_point(aes(colour = color))
# Genes se pueden considerar realmente como diferencialmente expresados.
xx <-res[order(res$padj,na.last=NA),]
resSig2 <- xx[xx$padj < 0.1, ]
dim(resSig2)
plotMA(res, main="MA-plot DESeq2 DC235vsDSS124", ylim=c(-2,2))
resSig2
VPSol2 <- data.frame(resSig2$log2FoldChange, resSig2$pvalue, row.names = rownames(resSig2)) ##Creates a data
View(VPSol2)
VPSol2 <- VPSol %>% rename(FoldChange = resOrdered.log2FoldChange, p_value = resOrdered.pvalue)
VPSol2 <- VPSol %>% rename(FoldChange = esSig2.log2FoldChange, p_value = resSig2.pvalue)
VPSol2 <- VPSol %>% rename(FoldChange = resSig2.log2FoldChange, p_value = resSig2.pvalue)
VPSol2$resSig2.log2FoldChange
VPSol2 <- VPSol %>% rename(FoldChange = resSig2.log2FoldChange, p_value = resSig2.pvalue)
View(VPSol2)
VPSol2 <- data.frame(resSig2$log2FoldChange, resSig2$pvalue, row.names = rownames(resSig2)) ##Creates a data
VPSol <- VPSol %>% rename(FoldChange = resOrdered.log2FoldChange, p_value = resOrdered.pvalue)
VPSol <- data.frame(resOrdered$log2FoldChange, resOrdered$pvalue, row.names = rownames(resOrdered)) ##Creates a data
VPSol2 <- data.frame(resSig2$log2FoldChange, resSig2$pvalue, row.names = rownames(resSig2)) ##Creates a data
VPSol <- VPSol %>% rename(FoldChange = resOrdered.log2FoldChange, p_value = resOrdered.pvalue)
VPSol2 <- VPSol %>% rename(FoldChange = resSig2.log2FoldChange, p_value = resSig2.pvalue)
VPSol2 <- VPSol2 %>% rename(FoldChange = resSig2.log2FoldChange, p_value = resSig2.pvalue)
VPSol2$color <- ifelse((VPSol2$FoldChange > 1.5) & (VPSol2$p_value < 0.05), "A",
ifelse((VPSol2$FoldChange < -1.5) & (VPSol2$p_value < 0.05), "B",
ifelse((VPSol2$FoldChange > 1.5) & (VPSol2$p_value > 0.05), "C",
ifelse((VPSol2$FoldChange < -1.5) & (VPSol2$p_value > 0.05), "D",
ifelse((VPSol2$FoldChange < 1.5) & (VPSol2$p_value > 0.05), "E", "F")))))
ggplot(VPSol, aes(x=FoldChange, y=p_value)) +
geom_point(aes(colour = color))
palette()
ggplot(VPSol2, aes(x=FoldChange, y=p_value)) +
geom_point(aes(colour = color))
ggplot(VPSol, aes(x=FoldChange, y=p_value)) +
geom_point(aes(colour = color))
ggplot(VPSol, aes(x=FoldChange, y=p_value)) +
geom_point(aes(colour = color))
VPSol$color <- ifelse((VPSol$FoldChange > 1.5) & (VPSol$p_value < 0.05), "A",
ifelse((VPSol$FoldChange < -1.5) & (VPSol$p_value < 0.05), "B",
ifelse((VPSol$FoldChange > 1.5) & (VPSol$p_value > 0.05), "C",
ifelse((VPSol$FoldChange < -1.5) & (VPSol$p_value > 0.05), "D",
ifelse((VPSol$FoldChange < 1.5) & (VPSol$p_value > 0.05), "E", "F")))))
VPSol2$color <- ifelse((VPSol2$FoldChange > 1.5) & (VPSol2$p_value < 0.05), "A",
ifelse((VPSol2$FoldChange < -1.5) & (VPSol2$p_value < 0.05), "B",
ifelse((VPSol2$FoldChange > 1.5) & (VPSol2$p_value > 0.05), "C",
ifelse((VPSol2$FoldChange < -1.5) & (VPSol2$p_value > 0.05), "D",
ifelse((VPSol2$FoldChange < 1.5) & (VPSol2$p_value > 0.05), "E", "F")))))
ggplot(VPSol, aes(x=FoldChange, y=p_value)) +
geom_point(aes(colour = color))
ggplot(VPSol2, aes(x=FoldChange, y=p_value)) +
geom_point(aes(colour = color))
plotMA(res, main="MA-plot DESeq2 DC235vsDSS124", ylim=c(-2,2))
ggplot(VPSol2, aes(x=FoldChange, y=p_value)) +
geom_point(aes(colour = color)) +
ylim(0,0.05)
